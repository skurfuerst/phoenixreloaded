h2. JavaScript Style Guide

After reading this guide, you will be able to:

* Follow our naming conventions for files, variables and types.
* Use RequireJS in a clean way.
* Write clean JavaScript code that looks good.

endprologue.

h3. Code Conventions

* We use only the +TAB+ character for indentation.
* We use +UpperCamelCase+ for class names, and +lowerCamelCase+ for method and property names.
* Methods and properties that begin with an underscore (+_+) are @private@.
* Variables which contain *jQuery* elements should be named like +$element+, starting with a @$@.
* We use +that+ as a name for a closure reference to +this+, but try to avoid it if there's the possibility of scope binding.
  Unfortunately jQuery's event handlers do not allow easy scope binding.

h3. Code Documentation

We use @JSDoc@ for code documentation.

h3. RequireJS module skeleton

All JavaScript files are RequireJS modules. They should follow this structure:

WARNING: still has to be done and discussed

<javascript>
TODO
</javascript>

h3. Public API, Private methods and attributes

All methods and properties which are public API are marked with +@api+. The public API is supported
for a longer period, and when a public API changes, this is clearly communicated in the
Release Notes of a version.

On the contrary, we prefix +private+ methods and attributes with an underscore. The *user* of an API should never
override or call methods +private+ methods as they are not meant for him to be overridden.

There's also a type in between: methods which are not +private+ but do not have a +@api+ annotation. They
can be safely overridden by the user, and he should not experience any unwanted behavior. Still, the names or
functionality of these methods can change without notice between releases.
In the long run, all of these methods should become part of the public API, as soon as they are proven in real
life.

To sum it up, we have three types of methods/properties:

* +@api+ methods: Public API, the user of the object can rely on the functionality to be stable, changes in @api are clearly communicated
* non-@@api@ but also not private: The user can use it, but needs to be aware the method might still change.
* private (prefixed with +_+): The user should never ever call or access this. Very strange things might happen.


h3. Changelog

* July 10, 2011: Initial version by "Sebastian Kurf√ºrst":credits.html#skurfuerst
